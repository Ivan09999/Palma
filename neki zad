#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <time.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>

typedef struct Node {
    int x;
    struct Node* next;
}Node;
void InsertSorted(Node** root, int value)
{
    Node* newNode = malloc(sizeof(Node));
    if (newNode == NULL) return;

    newNode->x = value;

    if ((*root) == NULL || value > (*root)->x) {
        newNode->next = *root;
        *root = newNode;
        return;
    }
    Node* currentEl = *root;
    while (currentEl->next != NULL)
    {
        if (value > currentEl->next->x)
        {
            break;
        }
        currentEl = currentEl->next;
    }
    newNode->next = currentEl->next;
    currentEl->next = newNode;
}

int main()
{
    srand(time(NULL));

    Node* rootParni = NULL;
    Node* rootNeparni = NULL;
    int i = 0;  int x = 0;  int r = 0;  int brojacNep = 0; int brojacPar = 0;
    int repeat = 0, repeat1 = 0;
    while (i < 20)
    {
        r = rand() % 30 + 50;
        if (r % 2 == 0 && brojacPar < 10)
        {
            repeat = 0;
           for (Node* curr = rootParni; curr != NULL; curr = curr->next)
            {
               if (curr->x == r)
               {
                   repeat++;
                   break;
               }
            }  
         if (repeat == 0)
        {
            printf(" %d ", r);
            InsertSorted(&rootParni, r);
            brojacPar++;
            i++;
        }
        }
        else if (r % 2 != 0 && brojacNep < 10)
        {
            repeat1 = 0;
            for (Node* curr1 = rootNeparni; curr1 != NULL; curr1 = curr1->next)
            {
                if (curr1->x == r)
                {
                    repeat1++;
                    break;
                }
            } 
        if(repeat1 == 0)
        {
            printf(" %d", r);
            InsertSorted(&rootNeparni, r);
            brojacNep++;
            i++;
        }
        }
    }
    i = 0;

    printf("\node parni: ");
    Node* currentEl3 = rootParni;
    while (currentEl3 != NULL)
    {
        printf("%d ", currentEl3->x);
        currentEl3 = currentEl3->next;
    }
    printf("\node neparni: ");
    currentEl3 = rootNeparni;
    while (currentEl3 != NULL)
    {
        printf("%d ", currentEl3->x);
        currentEl3 = currentEl3->next;
    }
   // for (i = 0; i < 10; i++)  free(arraNepaarni[i]);
    return 0;
}
