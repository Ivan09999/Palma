#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>


typedef struct Node {
	int x;
	struct Node* next;
	struct Node* previous;
}Node;

int addElementStart(Node* root, int value) {
	Node* newNode = malloc(sizeof(Node));
	if (newNode == NULL) return 3;

	newNode->x = value;
	root->next->previous = newNode;
	newNode->next = root->next;
	newNode->previous = root;
	root->next = newNode;

	return 0;
}
int addEnd( Node* head, int value) {
	Node* newNode = malloc(sizeof(Node));
	if (newNode == NULL) return 3;

	newNode->x = value;
	newNode->next = head;
	newNode->previous = head->previous;
	head->previous->next = newNode;
	head->previous = newNode;
	return 0;
}
int insertAfter(int afterNumber, int value, Node* root) {
	Node* curr = root;
	while (curr->next != NULL) {
		if (curr->x == afterNumber) {
			break;
		}
		curr = curr->next;
	}
	Node* newNode = malloc(sizeof(Node));
	if (newNode == NULL) return;
	newNode->x = value;
	curr->next->previous = newNode;
	newNode->next = curr->next;
	curr->next = newNode;
	newNode->previous = curr;
	return 0;
}
int removeElement(int afterNumber, Node* root) {
	Node* removeElement = root;
	while (removeElement->next != NULL) {
		if (removeElement->x == afterNumber) {
			break;
		}
		removeElement = removeElement->next;
	}
	removeElement->previous->next = removeElement->next;
	removeElement->next->previous = removeElement->previous;
	free(removeElement);
	return 0;
}
int reverseLinkedList(Node** root, Node** head) {
	Node* curr = (*root);
	while (curr != NULL) {
		Node* next = curr->next;

		curr->next = curr->previous;
		curr->previous = next;

		curr = next;
	}
	Node* temp = *head;
	*head = *root;
	*root = temp;

}

int main()
{
	Node* root = malloc(sizeof(Node));
	if (root == NULL) return;
	Node* head = malloc(sizeof(Node));
	if (head == NULL) return;
	root->next = head;
	head->next = NULL;
	head->previous = root;
	root->previous = NULL;

	addElementStart(root, 4);
	addEnd(head, 44);
	addEnd(head, 445);
	addEnd(head, 4455);
	addEnd(head, 444444);
	
	reverseLinkedList(&root, &head);
	//Node* curr = head->previous;
	//while (curr->previous != NULL)
	//{
	//	printf("%d ", curr->x);
	//	curr = curr->previous;
	//}
	printf("\nOd pocetka tribalo\n");
	Node* curr = root->next;
	while (curr->next != NULL)
	{
		printf("%d ", curr->x);
		curr = curr->next;
	}

	return 0;
}
