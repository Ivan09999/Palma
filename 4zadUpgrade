#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>

typedef struct Node {
	int X;
	int Y;
	struct Node* next;
}Node;

int insertAfter(Node* curr, int x, int y)
{
	Node* newNode = malloc(sizeof(Node));
	if (newNode == NULL) return 5;
	newNode->X = x;
	newNode->Y = y;

	newNode->next = curr->next;
	curr->next = newNode;

	return 0;
}
int insertSorted(Node** root, int x, int y)
{
	Node* newNode = malloc(sizeof(Node));
	if (newNode == NULL) return 5;
	newNode->X = x;
	newNode->Y = y;

	Node* curr = *root;
	if (curr == NULL)
	{
		insertAfter(curr, x, y);
		return 1;
	}
	while (curr->next != NULL)
	{
		if (y < curr->next->Y)
			break;

		curr = curr->next;
	}
	insertAfter(curr, x, y);

	return 0;
}
int PrintList(Node* root)
{
	Node* currentEl = root->next;
	while (currentEl != NULL)
	{
		printf("%dx^%d\n", currentEl->X, currentEl->Y);
		currentEl = currentEl->next;
	}
	return 0;
}
int AddPolynoms(Node* rootList, Node** rootListZ, int i) {
	int zbrojPolinomaX;
	int zbrojPolinomaY;
	Node* curr = rootList->next;;
	Node* curr2 = curr;

	while ((curr) != NULL) {
		zbrojPolinomaX = 0;
		zbrojPolinomaY = 0;
		while (curr2 != NULL && curr->Y == curr2->Y)
		{
			zbrojPolinomaX = zbrojPolinomaX + curr2->X;
			zbrojPolinomaY = curr->Y;

			curr2 = curr2->next;
		}//insertSorted(rootZ, zbrojPolinomaX, zbrojPolinomaY);
		if ( i >= 0)	{
			insertSorted(&(rootListZ[i]), zbrojPolinomaX, zbrojPolinomaY);
		}
		else if (i < 0)
		{
			insertSorted(rootListZ, zbrojPolinomaX, zbrojPolinomaY);
		}
		curr = curr2;
	}
	return 0;
}


int mulitplyPolynoms(Node* root0, Node* root1, Node** root01M) {
	Node* curr0 = root0->next;
	Node* curr1 = root1->next;

	while (curr0 != NULL)
	{
		while (curr1 != NULL)
		{
			int umnozakX = 1;
			int zbrojY = 0;

			umnozakX = curr0->X * curr1->X;
			zbrojY = curr0->Y + curr1->Y;

			insertSorted(root01M, umnozakX, zbrojY);
			curr1 = curr1->next;
		}
		
		curr0 = curr0->next;
		curr1 = root1->next;
	}
	return 0;
}

int mulitplyPolynomsSve(Node **rootList, Node** rootListSvePomnozene) {
	
	Node* currMn = rootList[0];
	Node** currMn2 = rootList[1];
	int i = 2;
	int j = 0;
	mulitplyPolynoms(currMn, currMn2, rootListSvePomnozene[0]);
	while (currMn2 != NULL)
	{
		currMn2 = rootList[i];
		mulitplyPolynoms(currMn2, rootListSvePomnozene[j], rootListSvePomnozene[j+1]);
		i++;
		j++;
	}

	return j+1;
}


int Deallocation(Node** root)
{
	Node* toRemove = NULL;
	Node* curr = *root;

	while (curr != NULL) {
		toRemove = curr;
		curr = curr->next;
		free(toRemove);
	}
	//free(*root);
	return 0;
}
int AddTwoPolynoms(Node* root0, Node* root1, Node** root01, Node** root01Z)
{
	Node* curr0 = root0->next;
	Node* curr1 = root1->next;

	while (curr0 != NULL) {
		insertSorted(root01, curr0->X, curr0->Y);
		curr0 = curr0->next;
	}

	while (curr1 != NULL) {
		insertSorted(root01, curr1->X, curr1->Y);
		curr1 = curr1->next;
	}
	//	AddPolynoms(*root01, root01Z);

	int zbrojPolinomaX = 0;
	int zbrojPolinomaY = 0;
	while (curr0 != NULL && curr1 != NULL)
	{
		zbrojPolinomaX = 0;
		zbrojPolinomaY = 0;

		if (curr0->Y == curr1->Y)
		{
			zbrojPolinomaX = curr0->X + curr1->X;
			zbrojPolinomaY = curr1->Y;
			insertSorted(root01, zbrojPolinomaX, zbrojPolinomaY);
			curr0 = curr0->next;
			curr1 = curr1->next;
		}
		else if (curr0->Y < curr1->Y)
		{
			insertSorted(root01, curr0->X, curr0->Y);
			curr0 = curr0->next;
		}
		else if (curr0->Y > curr1->Y)
		{
			insertSorted(root01, curr1->X, curr1->Y);
			curr1 = curr1->next;
		}
	}

	return 0;

}
int ReadFromFile(Node** rootList, Node** rootListZ)
{
	int i = 0, n = 0, rowCount = 0;
	Node Polinom = {
	   .X = 0,
	   .Y = 0,
	   .next = NULL
	};
	char buffer[1000] = { 0 };
	char* pBuffer = buffer;

	FILE* file = fopen("t.txt", "r");;
	if (file == NULL) {
		printf("File not opened\n");
		return 0;
	}
	while (!feof(file)) {
		rootList[rowCount] = malloc(sizeof(Node));
		rootList[rowCount]->next = NULL;

		rootListZ[rowCount] = malloc(sizeof(Node));
		rootListZ[rowCount]->next = NULL;

		fgets(pBuffer, 1000, file);
		while (strlen(pBuffer) > 0) {
			sscanf(pBuffer, "%d %d %n", &Polinom.X, &Polinom.Y, &n);
			insertSorted(&(rootList[rowCount]), Polinom.X, Polinom.Y);

			pBuffer = pBuffer + n;
		}
		rowCount++;
	}
	return 0;
}
int main() {

		Node* rottSveUJednoj = malloc(sizeof(Node)); if (rottSveUJednoj == NULL) printf("nije alociran prostor za zbrojit sve\n");
		rottSveUJednoj->next = NULL;
		
	
		Node* root01M = malloc(sizeof(Node));
		root01M->next = NULL;

		Node* rootSveZbrojene2 = malloc(sizeof(Node));
		rootSveZbrojene2->next = NULL;
		Node* rootList[10] = { NULL };
		Node* rootListZ[10] = { NULL };
		Node* rootListSvePomnozene[10] = { NULL };

		ReadFromFile(rootList, rootListZ);
		int i = 0;
		while (rootList[i] != NULL)
		{
			printf("%d. lista\n", i + 1);
			PrintList(rootList[i]);
			i++;
		}
	
		i = 0;
		while (rootList[i] != NULL)
		{
			AddPolynoms(rootList[i], rootListZ, i);
			i++;
		}
		i = 0;
		while (rootListZ[i] != NULL)
		{
			printf("%d. lista zbrojena \n", i + 1);
			PrintList(rootListZ[i]);
			i++;
		}
		i = 0;
		while (rootListZ[i] != NULL)
		{
			Node* curr3 = rootListZ[i]->next;
			while(curr3 != NULL) {
				insertSorted(&rottSveUJednoj, curr3->X, curr3->Y);
				curr3 = curr3->next;
			}
			i++;
		}
		printf("SVE U jednoj\n");
		PrintList(rottSveUJednoj);

		AddPolynoms(  rottSveUJednoj, &rootSveZbrojene2, -2);
		printf("ovo je zbrojeno \n");
		PrintList(rootSveZbrojene2);
		
		//AddTwoPolynoms(root0Z, root1Z, &root01, &root01Z);
	/*		while (rootListZ[i] != NULL)
			{
				mulitplyPolynoms(rootListZ[i], rootListSvePomnozene);
				i++;
			}*/
	/*	printf("POMNOZWENO");
		int brojList = 	mulitplyPolynomsSve(rootListZ, rootListSvePomnozene);
		PrintList(rootListSvePomnozene[brojList]);*/


		mulitplyPolynoms(rootList[0], rootList[1], &root01M);
		printf("Pomnozene liste 1 i 2 \n");

		PrintList(root01M);

		//Deallocation(&root0);
		//Deallocation(&root1);

		return 0;
}
